#!/bin/bash

# =============================================================================
# SCRIPT DE INSTALACI√ìN DEL SISTEMA DE WEBHOOKS
# Configura el deployment autom√°tico para Hero Budget Backend
# =============================================================================

# Configuraci√≥n
WEBHOOK_DIR="/opt/hero_budget/webhook"
SERVICE_NAME="herobudget-webhook"
PORT="9000"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Funci√≥n para logging
log() {
    echo -e "${1}"
}

# Funci√≥n para manejar errores
error_exit() {
    log "${RED}‚ùå ERROR: $1${NC}"
    exit 1
}

# Funci√≥n para verificar si el usuario es root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        error_exit "Este script debe ejecutarse como root"
    fi
}

# Funci√≥n para verificar prerequisitos
check_prerequisites() {
    log "${BLUE}üîç Verificando prerequisitos...${NC}"
    
    # Verificar Go
    if ! command -v go &> /dev/null; then
        error_exit "Go no est√° instalado. Instala Go primero."
    fi
    
    # Verificar Git
    if ! command -v git &> /dev/null; then
        error_exit "Git no est√° instalado. Instala Git primero."
    fi
    
    # Verificar curl
    if ! command -v curl &> /dev/null; then
        error_exit "curl no est√° instalado. Instala curl primero."
    fi
    
    # Verificar systemctl
    if ! command -v systemctl &> /dev/null; then
        error_exit "systemd no est√° disponible."
    fi
    
    log "${GREEN}‚úÖ Prerequisitos verificados${NC}"
}

# Funci√≥n para crear directorios necesarios
setup_directories() {
    log "${BLUE}üìÅ Configurando directorios...${NC}"
    
    # Crear directorio webhook si no existe
    mkdir -p "$WEBHOOK_DIR"
    chmod 755 "$WEBHOOK_DIR"
    
    # Crear directorio de logs
    mkdir -p "/var/log/herobudget"
    chmod 755 "/var/log/herobudget"
    
    # Crear directorio de backups
    mkdir -p "/opt/hero_budget/backups"
    chmod 755 "/opt/hero_budget/backups"
    
    log "${GREEN}‚úÖ Directorios configurados${NC}"
}

# Funci√≥n para configurar el firewall
setup_firewall() {
    log "${BLUE}üî• Configurando firewall...${NC}"
    
    # Verificar si ufw est√° instalado
    if command -v ufw &> /dev/null; then
        # Permitir el puerto del webhook
        ufw allow $PORT/tcp comment "Hero Budget Webhook"
        log "${GREEN}‚úÖ Puerto $PORT permitido en UFW${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  UFW no est√° instalado, configuraci√≥n manual del firewall requerida${NC}"
    fi
    
    # Si usas iptables directamente
    if command -v iptables &> /dev/null; then
        # Verificar si la regla ya existe
        if ! iptables -L INPUT -n | grep -q ":$PORT "; then
            iptables -A INPUT -p tcp --dport $PORT -j ACCEPT
            log "${GREEN}‚úÖ Regla iptables a√±adida para puerto $PORT${NC}"
        else
            log "${GREEN}‚úÖ Regla iptables para puerto $PORT ya existe${NC}"
        fi
    fi
}

# Funci√≥n para configurar el servicio systemd
setup_systemd_service() {
    log "${BLUE}‚öôÔ∏è  Configurando servicio systemd...${NC}"
    
    # Copiar archivo de servicio
    cp "$WEBHOOK_DIR/herobudget-webhook.service" "/etc/systemd/system/"
    
    # Recargar systemd
    systemctl daemon-reload
    
    # Habilitar el servicio
    systemctl enable $SERVICE_NAME
    
    log "${GREEN}‚úÖ Servicio systemd configurado${NC}"
}

# Funci√≥n para compilar el webhook server
compile_webhook() {
    log "${BLUE}üî® Compilando webhook server...${NC}"
    
    cd "$WEBHOOK_DIR" || error_exit "No se pudo acceder al directorio webhook"
    
    # Inicializar m√≥dulo Go si no existe
    if [ ! -f "go.mod" ]; then
        go mod init herobudget-webhook
    fi
    
    # Descargar dependencias
    go mod tidy
    
    # Compilar
    go build -o webhook_server webhook_server.go
    chmod +x webhook_server
    
    log "${GREEN}‚úÖ Webhook server compilado${NC}"
}

# Funci√≥n para configurar permisos
setup_permissions() {
    log "${BLUE}üîê Configurando permisos...${NC}"
    
    # Hacer scripts ejecutables
    chmod +x "$WEBHOOK_DIR/deploy.sh"
    chmod +x "/opt/hero_budget/backend/restart_services.sh"
    
    # Configurar permisos del directorio webhook
    chown -R root:root "$WEBHOOK_DIR"
    chmod -R 755 "$WEBHOOK_DIR"
    
    log "${GREEN}‚úÖ Permisos configurados${NC}"
}

# Funci√≥n para generar configuraci√≥n de ejemplo
generate_config() {
    log "${BLUE}üìù Generando configuraci√≥n de ejemplo...${NC}"
    
    cat > "$WEBHOOK_DIR/webhook_config.example" << EOF
# =============================================================================
# CONFIGURACI√ìN DEL WEBHOOK - HERO BUDGET
# =============================================================================

# 1. CONFIGURAR SECRET EN GITHUB:
#    - Ve a tu repositorio en GitHub
#    - Settings > Webhooks > Add webhook
#    - Payload URL: http://tu-servidor.com:9000/webhook
#    - Content type: application/json
#    - Secret: [generar-un-secret-seguro]

# 2. CONFIGURAR SECRET EN EL SERVIDOR:
#    export GITHUB_WEBHOOK_SECRET="tu-secret-aqui"
#    
#    O a√±adir al archivo de servicio:
#    Environment=GITHUB_WEBHOOK_SECRET=tu-secret-aqui

# 3. URLs DISPONIBLES:
#    - POST /webhook  - Recibe webhooks de GitHub
#    - GET  /health   - Health check
#    - GET  /logs     - Ver logs recientes

# 4. LOGS:
#    - Servicio: journalctl -u herobudget-webhook -f
#    - Deployment: tail -f /opt/hero_budget/webhook/deployment.log

# 5. COMANDOS √öTILES:
#    - Reiniciar servicio: systemctl restart herobudget-webhook
#    - Ver estado: systemctl status herobudget-webhook
#    - Ver logs: journalctl -u herobudget-webhook -f
EOF

    log "${GREEN}‚úÖ Configuraci√≥n de ejemplo generada en webhook_config.example${NC}"
}

# Funci√≥n para probar la configuraci√≥n
test_configuration() {
    log "${BLUE}üß™ Probando configuraci√≥n...${NC}"
    
    # Verificar que el puerto est√° libre
    if netstat -tuln | grep -q ":$PORT "; then
        log "${YELLOW}‚ö†Ô∏è  Puerto $PORT ya est√° en uso${NC}"
        log "${BLUE}‚ÑπÔ∏è  Procesos usando el puerto:${NC}"
        lsof -i :$PORT
    fi
    
    # Verificar archivos necesarios
    required_files=(
        "$WEBHOOK_DIR/webhook_server.go"
        "$WEBHOOK_DIR/deploy.sh"
        "/opt/hero_budget/backend/restart_services.sh"
        "/etc/systemd/system/herobudget-webhook.service"
    )
    
    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            log "${GREEN}  ‚úÖ $file${NC}"
        else
            log "${RED}  ‚ùå $file - NO ENCONTRADO${NC}"
        fi
    done
}

# Funci√≥n para iniciar el servicio
start_service() {
    log "${BLUE}üöÄ Iniciando servicio webhook...${NC}"
    
    # Iniciar el servicio
    systemctl start $SERVICE_NAME
    
    # Esperar un poco
    sleep 3
    
    # Verificar estado
    if systemctl is-active --quiet $SERVICE_NAME; then
        log "${GREEN}‚úÖ Servicio webhook iniciado correctamente${NC}"
        
        # Probar health check
        if curl -s http://localhost:$PORT/health > /dev/null; then
            log "${GREEN}‚úÖ Health check exitoso${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  Health check fall√≥${NC}"
        fi
    else
        log "${RED}‚ùå Error iniciando el servicio${NC}"
        log "${BLUE}Ver logs con: journalctl -u $SERVICE_NAME -n 20${NC}"
    fi
}

# Funci√≥n para mostrar resumen final
show_summary() {
    log "${WHITE}=============================================================${NC}"
    log "${WHITE}üéâ INSTALACI√ìN DEL WEBHOOK COMPLETADA${NC}"
    log "${WHITE}=============================================================${NC}"
    
    log "${CYAN}üìã INFORMACI√ìN IMPORTANTE:${NC}"
    log "${WHITE}  ‚Ä¢ Servicio: $SERVICE_NAME${NC}"
    log "${WHITE}  ‚Ä¢ Puerto: $PORT${NC}"
    log "${WHITE}  ‚Ä¢ Directorio: $WEBHOOK_DIR${NC}"
    log "${WHITE}  ‚Ä¢ URL Webhook: http://tu-servidor:$PORT/webhook${NC}"
    
    log "${CYAN}üìã PR√ìXIMOS PASOS:${NC}"
    log "${WHITE}  1. Configurar secret: export GITHUB_WEBHOOK_SECRET='tu-secret'${NC}"
    log "${WHITE}  2. Configurar webhook en GitHub (ver webhook_config.example)${NC}"
    log "${WHITE}  3. Reiniciar servicio: systemctl restart $SERVICE_NAME${NC}"
    
    log "${CYAN}üìã COMANDOS √öTILES:${NC}"
    log "${WHITE}  ‚Ä¢ Estado: systemctl status $SERVICE_NAME${NC}"
    log "${WHITE}  ‚Ä¢ Logs: journalctl -u $SERVICE_NAME -f${NC}"
    log "${WHITE}  ‚Ä¢ Test: curl http://localhost:$PORT/health${NC}"
    log "${WHITE}  ‚Ä¢ Logs deployment: tail -f $WEBHOOK_DIR/deployment.log${NC}"
}

# =============================================================================
# FUNCI√ìN PRINCIPAL
# =============================================================================

main() {
    log "${WHITE}=============================================================${NC}"
    log "${WHITE}üöÄ INSTALANDO SISTEMA DE WEBHOOKS - HERO BUDGET${NC}"
    log "${WHITE}=============================================================${NC}"
    
    check_root
    check_prerequisites
    setup_directories
    setup_firewall
    setup_systemd_service
    compile_webhook
    setup_permissions
    generate_config
    test_configuration
    start_service
    show_summary
    
    log "${GREEN}üéâ Instalaci√≥n completada exitosamente${NC}"
}

# Ejecutar instalaci√≥n
main

exit 0 