pipeline {
    agent any
    
    environment {
        // Configuraci√≥n del proyecto
        BACKEND_PATH = '/opt/hero_budget/backend'
        BACKUP_PATH = '/opt/hero_budget/backups'
        SERVICE_NAME = 'herobudget'
        REPO_NAME = 'herobudget-backend'
        
        // Scripts de automatizaci√≥n
        WEBHOOK_DEPLOY_SCRIPT = './scripts/webhook_deploy.sh'
        MANAGE_SERVICES_SCRIPT = './scripts/manage_services.sh'
        VERIFY_DEPLOYMENT_SCRIPT = './scripts/verify_deployment.sh'
        
        // Configuraci√≥n de notificaciones
        SLACK_CHANNEL = '#herobudget-deployments'
        EMAIL_RECIPIENTS = 'admin@herobudget.com'
        
        // Variables de estado
        DEPLOYMENT_STATUS = 'UNKNOWN'
        BACKUP_FILE = ''
        BUILD_TIMESTAMP = sh(script: 'date +%Y%m%d_%H%M%S', returnStdout: true).trim()
    }
    
    options {
        // Configurar timeouts y retenciones
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        skipDefaultCheckout(false)
        
        // Configurar triggers
        triggers {
            githubPush()
        }
    }
    
    stages {
        stage('üîç Pre-Deploy Checks') {
            steps {
                script {
                    echo "üöÄ Iniciando pipeline CI/CD Hero Budget Backend"
                    echo "=================================================="
                    echo "Build: ${env.BUILD_NUMBER}"
                    echo "Branch: ${env.GIT_BRANCH}"
                    echo "Commit: ${env.GIT_COMMIT}"
                    echo "Timestamp: ${BUILD_TIMESTAMP}"
                    echo "=================================================="
                    
                    // Hacer ejecutables los scripts
                    sh '''
                        chmod +x scripts/*.sh 2>/dev/null || true
                        echo "‚úÖ Scripts marcados como ejecutables"
                    '''
                    
                    // Verificar informaci√≥n del commit
                    sh '''
                        echo "üìã Informaci√≥n del commit:"
                        git log --oneline -1
                        echo ""
                        echo "üìÇ Archivos modificados:"
                        git diff --name-only HEAD~1 HEAD || echo "Primer commit"
                    '''
                }
            }
        }
        
        stage('üîß Code Quality & Tests') {
            parallel {
                stage('üß™ Run Tests') {
                    steps {
                        script {
                            echo "üß™ Ejecutando tests del proyecto..."
                            
                            sh '''
                                # Verificar si Go est√° disponible
                                if command -v go &> /dev/null; then
                                    echo "‚úÖ Go disponible: $(go version)"
                                    
                                    # Ejecutar tests si existen
                                    if find . -name "*_test.go" | grep -q .; then
                                        echo "üß™ Ejecutando tests Go..."
                                        go test ./... -v
                                    else
                                        echo "‚ÑπÔ∏è No se encontraron tests Go"
                                    fi
                                    
                                    # Verificar sintaxis
                                    echo "üîç Verificando sintaxis Go..."
                                    go vet ./...
                                else
                                    echo "‚ö†Ô∏è Go no disponible en Jenkins"
                                fi
                            '''
                        }
                    }
                }
                
                stage('üîí Security Scan') {
                    steps {
                        script {
                            echo "üîí Ejecutando escaneo de seguridad..."
                            
                            sh '''
                                echo "üîç Buscando credenciales hardcodeadas..."
                                if grep -r -i "password\|secret\|key" --include="*.go" . | grep -v "// "; then
                                    echo "‚ö†Ô∏è Posibles credenciales encontradas (revisar manualmente)"
                                else
                                    echo "‚úÖ No se encontraron credenciales obvias"
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üõë Stop Services') {
            steps {
                script {
                    echo "üõë Parando servicios usando manage_services.sh..."
                    
                    def stopResult = sh(
                        script: '''
                            if [ -f "${MANAGE_SERVICES_SCRIPT}" ]; then
                                echo "üîÑ Ejecutando script de gesti√≥n de servicios..."
                                ${MANAGE_SERVICES_SCRIPT} stop
                            else
                                echo "‚ö†Ô∏è Script manage_services.sh no encontrado, usando m√©todo manual..."
                                ssh root@178.16.130.178 "systemctl stop herobudget || true"
                            fi
                        ''',
                        returnStatus: true
                    )
                    
                    if (stopResult == 0) {
                        echo "‚úÖ Servicios parados correctamente"
                    } else {
                        echo "‚ö†Ô∏è Advertencia: Problemas parando servicios, continuando..."
                    }
                }
            }
        }
        
        stage('üöÄ Webhook Deploy') {
            steps {
                script {
                    echo "üöÄ Ejecutando deployment autom√°tico con webhook_deploy.sh..."
                    
                    def deployResult = sh(
                        script: '''
                            if [ -f "${WEBHOOK_DEPLOY_SCRIPT}" ]; then
                                echo "üì• Ejecutando script de webhook deployment..."
                                ${WEBHOOK_DEPLOY_SCRIPT} main --force
                            else
                                echo "‚ùå Script webhook_deploy.sh no encontrado"
                                exit 1
                            fi
                        ''',
                        returnStatus: true
                    )
                    
                    if (deployResult == 0) {
                        echo "‚úÖ Deployment autom√°tico completado"
                    } else {
                        error "‚ùå Error durante deployment autom√°tico"
                    fi
                }
            }
        }
        
        stage('üöÄ Start Services') {
            steps {
                script {
                    echo "üöÄ Iniciando servicios usando manage_services.sh..."
                    
                    def startResult = sh(
                        script: '''
                            if [ -f "${MANAGE_SERVICES_SCRIPT}" ]; then
                                echo "üîÑ Ejecutando script de gesti√≥n de servicios..."
                                ${MANAGE_SERVICES_SCRIPT} restart
                            else
                                echo "‚ö†Ô∏è Script manage_services.sh no encontrado, usando m√©todo manual..."
                                ssh root@178.16.130.178 "
                                    systemctl start herobudget
                                    systemctl reload nginx
                                "
                            fi
                        ''',
                        returnStatus: true
                    )
                    
                    if (startResult == 0) {
                        echo "‚úÖ Servicios iniciados correctamente"
                    } else {
                        error "‚ùå Error iniciando servicios"
                    fi
                }
            }
        }
        
        stage('üîç Post-Deploy Verification') {
            steps {
                script {
                    echo "üîç Verificando deployment..."
                    
                    def verifyResult = sh(
                        script: '''
                            if [ -f "${VERIFY_DEPLOYMENT_SCRIPT}" ]; then
                                echo "‚úÖ Ejecutando verificaci√≥n autom√°tica..."
                                ${VERIFY_DEPLOYMENT_SCRIPT}
                            else
                                echo "‚ö†Ô∏è Script de verificaci√≥n no encontrado, usando verificaci√≥n manual..."
                                ${MANAGE_SERVICES_SCRIPT} health || echo "Health check manual"
                            fi
                        ''',
                        returnStatus: true
                    )
                    
                    if (verifyResult == 0) {
                        echo "‚úÖ Verificaci√≥n exitosa"
                        env.DEPLOYMENT_STATUS = 'SUCCESS'
                    } else {
                        echo "‚ùå Fallo en verificaci√≥n"
                        env.DEPLOYMENT_STATUS = 'FAILED'
                        error "Deployment verification failed"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                echo "üéâ ¬°DEPLOYMENT EXITOSO!"
                echo "=================================================="
                echo "‚úÖ Build: ${env.BUILD_NUMBER}"
                echo "‚úÖ Branch: ${env.GIT_BRANCH}"
                echo "‚úÖ Timestamp: ${BUILD_TIMESTAMP}"
                echo "‚úÖ Estado: SUCCESS"
                echo "=================================================="
                
                // Log de √©xito
                sh '''
                    echo "‚úÖ $(date): Deployment exitoso - Build ${BUILD_NUMBER}" >> /opt/hero_budget/logs/jenkins_deployments.log
                '''
            }
        }
        
        failure {
            script {
                echo "‚ùå DEPLOYMENT FALLIDO"
                echo "=================================================="
                echo "‚ùå Build: ${env.BUILD_NUMBER}"
                echo "‚ùå Branch: ${env.GIT_BRANCH}"
                echo "‚ùå Timestamp: ${BUILD_TIMESTAMP}"
                echo "‚ùå Estado: FAILED"
                echo "=================================================="
                
                // Intentar rollback autom√°tico si hay backup
                sh '''
                    echo "üîÑ Intentando rollback autom√°tico..."
                    if [ -f "/tmp/last_backup.txt" ]; then
                        BACKUP_FILE=$(cat /tmp/last_backup.txt)
                        if [ -f "/opt/hero_budget/backups/$BACKUP_FILE" ]; then
                            echo "üì¶ Restaurando backup: $BACKUP_FILE"
                            ssh root@178.16.130.178 "
                                cd /opt/hero_budget
                                systemctl stop herobudget || true
                                rm -rf backend_failed
                                mv backend backend_failed || true
                                tar -xzf backups/$BACKUP_FILE
                                systemctl start herobudget
                            "
                            echo "‚úÖ Rollback completado"
                        else
                            echo "‚ùå Backup no encontrado para rollback"
                        fi
                    else
                        echo "‚ùå No hay informaci√≥n de backup para rollback"
                    fi
                    
                    echo "‚ùå $(date): Deployment fallido - Build ${BUILD_NUMBER}" >> /opt/hero_budget/logs/jenkins_deployments.log
                '''
            }
        }
        
        always {
            script {
                echo "üßπ Limpieza post-deployment..."
                sh '''
                    # Limpiar archivos temporales
                    rm -f /tmp/last_backup.txt /tmp/last_successful_deploy.txt 2>/dev/null || true
                    
                    # Mostrar estado final de servicios
                    if [ -f "${MANAGE_SERVICES_SCRIPT}" ]; then
                        echo "üìä Estado final de servicios:"
                        ${MANAGE_SERVICES_SCRIPT} status || true
                    fi
                '''
            }
        }
    }
} 